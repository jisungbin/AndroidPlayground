jisungbin@iMac AndroidPlayground % ./gradlew build
Starting a Gradle Daemon, 1 incompatible Daemon could not be reused, use --status for details
Configuration on demand is an incubating feature.

> Configure project :app
WARNING: The option 'android.databinding.incremental' is deprecated.
The current default is 'true'.
It was removed in version 8.1 of the Android Gradle plugin.

> Task :app:compileReleaseKotlin
w: visitVariable: VAR name:ms type:androidx.compose.runtime.MutableLongState [val]
  CALL 'public final fun remember <T> (calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=androidx.compose.runtime.MutableLongState origin=null
    <T>: androidx.compose.runtime.MutableLongState
    calculation: FUN_EXPR type=kotlin.Function0<androidx.compose.runtime.MutableLongState> origin=LAMBDA
      FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:androidx.compose.runtime.MutableLongState
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='local final fun <anonymous> (): androidx.compose.runtime.MutableLongState declared in land.sungbin.androidplayground.Content'
            CALL 'public final fun mutableLongStateOf (value: kotlin.Long): androidx.compose.runtime.MutableLongState declared in androidx.compose.runtime.SnapshotLongStateKt' type=androidx.compose.runtime.MutableLongState origin=null
              value: CALL 'public open fun currentTimeMillis (): kotlin.Long declared in java.lang.System' type=kotlin.Long origin=null

w: visitVariable: val ms: MutableLongState = remember<MutableLongState>(calculation = local fun <anonymous>(): MutableLongState {
  return mutableLongStateOf(value = currentTimeMillis())
}
)
w: transformStateInitializer: CALL 'public final fun remember <T> (calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=androidx.compose.runtime.MutableLongState origin=null
  <T>: androidx.compose.runtime.MutableLongState
  calculation: FUN_EXPR type=kotlin.Function0<androidx.compose.runtime.MutableLongState> origin=LAMBDA
    FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:androidx.compose.runtime.MutableLongState
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='local final fun <anonymous> (): androidx.compose.runtime.MutableLongState declared in land.sungbin.androidplayground.Content'
          CALL 'public final fun mutableLongStateOf (value: kotlin.Long): androidx.compose.runtime.MutableLongState declared in androidx.compose.runtime.SnapshotLongStateKt' type=androidx.compose.runtime.MutableLongState origin=null
            value: CALL 'public open fun currentTimeMillis (): kotlin.Long declared in java.lang.System' type=kotlin.Long origin=null

w: transformStateInitializer: remember<MutableLongState>(calculation = local fun <anonymous>(): MutableLongState {
  return mutableLongStateOf(value = currentTimeMillis())
}
)
w: [StateInitializer] transformed dump: CALL 'public final fun registerStateObjectTracking <S> (composable: land.sungbin.composeinvestigator.runtime.affect.AffectedComposable, composableKeyName: kotlin.String, stateName: kotlin.String, stateValueGetter: land.sungbin.composeinvestigator.runtime.StateValueGetter): S of land.sungbin.composeinvestigator.runtime.StateObjectTrackerKt.registerStateObjectTracking declared in land.sungbin.composeinvestigator.runtime.StateObjectTrackerKt' type=androidx.compose.runtime.MutableLongState origin=StateChangeTrackerOrigin
  <S>: androidx.compose.runtime.MutableLongState
  $receiver: CALL 'public final fun remember <T> (calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=androidx.compose.runtime.MutableLongState origin=null
    <T>: androidx.compose.runtime.MutableLongState
    calculation: FUN_EXPR type=kotlin.Function0<androidx.compose.runtime.MutableLongState> origin=LAMBDA
      FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:androidx.compose.runtime.MutableLongState
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='local final fun <anonymous> (): androidx.compose.runtime.MutableLongState declared in land.sungbin.androidplayground.Content'
            CALL 'public final fun mutableLongStateOf (value: kotlin.Long): androidx.compose.runtime.MutableLongState declared in androidx.compose.runtime.SnapshotLongStateKt' type=androidx.compose.runtime.MutableLongState origin=null
              value: CALL 'public open fun currentTimeMillis (): kotlin.Long declared in java.lang.System' type=kotlin.Long origin=null
  composable: CONSTRUCTOR_CALL 'public constructor <init> (name: kotlin.String, pkg: kotlin.String, filePath: kotlin.String, startLine: kotlin.Int, startColumn: kotlin.Int) [primary] declared in land.sungbin.composeinvestigator.runtime.affect.AffectedComposable' type=land.sungbin.composeinvestigator.runtime.affect.AffectedComposable origin=null
    name: CONST String type=kotlin.String value="Content"
    pkg: CONST String type=kotlin.String value="land.sungbin.androidplayground"
    filePath: CONST String type=kotlin.String value="/Users/jisungbin/AndroidStudioProjects/AndroidPlayground/app/src/main/kotlin/land/sungbin/androidplayground/ir-dump-target.kt"
    startLine: CONST Int type=kotlin.Int value=53
    startColumn: CONST Int type=kotlin.Int value=0
  composableKeyName: CONST String type=kotlin.String value="fun-Content()Unit/pkg-land.sungbin.androidplayground/file-ir-dump-target.kt"
  stateName: CONST String type=kotlin.String value="ms"

w: [StateInitializer] transformed dumpKotlinLike: remember<MutableLongState>(calculation = local fun <anonymous>(): MutableLongState {
  return mutableLongStateOf(value = currentTimeMillis())
}
).registerStateObjectTracking<MutableLongState>(composable = AffectedComposable(name = "Content", pkg = "land.sungbin.androidplayground", filePath = "/Users/jisungbin/AndroidStudioProjects/AndroidPlayground/app/src/main/kotlin/land/sungbin/androidplayground/ir-dump-target.kt", startLine = 53, startColumn = 0), composableKeyName = "fun-Content()Unit/pkg-land.sungbin.androidplayground/file-ir-dump-target.kt", stateName = "ms")
w: visitVariable: VAR name:ms type:androidx.compose.runtime.MutableLongState [val]
  CALL 'public final fun registerStateObjectTracking <S> (composable: land.sungbin.composeinvestigator.runtime.affect.AffectedComposable, composableKeyName: kotlin.String, stateName: kotlin.String, stateValueGetter: land.sungbin.composeinvestigator.runtime.StateValueGetter): S of land.sungbin.composeinvestigator.runtime.StateObjectTrackerKt.registerStateObjectTracking declared in land.sungbin.composeinvestigator.runtime.StateObjectTrackerKt' type=androidx.compose.runtime.MutableLongState origin=StateChangeTrackerOrigin
    <S>: androidx.compose.runtime.MutableLongState
    $receiver: CALL 'public final fun remember <T> (calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=androidx.compose.runtime.MutableLongState origin=null
      <T>: androidx.compose.runtime.MutableLongState
      calculation: FUN_EXPR type=kotlin.Function0<androidx.compose.runtime.MutableLongState> origin=LAMBDA
        FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:androidx.compose.runtime.MutableLongState
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='local final fun <anonymous> (): androidx.compose.runtime.MutableLongState declared in land.sungbin.androidplayground.Content'
              CALL 'public final fun mutableLongStateOf (value: kotlin.Long): androidx.compose.runtime.MutableLongState declared in androidx.compose.runtime.SnapshotLongStateKt' type=androidx.compose.runtime.MutableLongState origin=null
                value: CALL 'public open fun currentTimeMillis (): kotlin.Long declared in java.lang.System' type=kotlin.Long origin=null
    composable: CONSTRUCTOR_CALL 'public constructor <init> (name: kotlin.String, pkg: kotlin.String, filePath: kotlin.String, startLine: kotlin.Int, startColumn: kotlin.Int) [primary] declared in land.sungbin.composeinvestigator.runtime.affect.AffectedComposable' type=land.sungbin.composeinvestigator.runtime.affect.AffectedComposable origin=null
      name: CONST String type=kotlin.String value="Content"
      pkg: CONST String type=kotlin.String value="land.sungbin.androidplayground"
      filePath: CONST String type=kotlin.String value="/Users/jisungbin/AndroidStudioProjects/AndroidPlayground/app/src/main/kotlin/land/sungbin/androidplayground/ir-dump-target.kt"
      startLine: CONST Int type=kotlin.Int value=53
      startColumn: CONST Int type=kotlin.Int value=0
    composableKeyName: CONST String type=kotlin.String value="fun-Content()Unit/pkg-land.sungbin.androidplayground/file-ir-dump-target.kt"
    stateName: CONST String type=kotlin.String value="ms"

w: visitVariable: val ms: MutableLongState = remember<MutableLongState>(calculation = local fun <anonymous>(): MutableLongState {
  return mutableLongStateOf(value = currentTimeMillis())
}
).registerStateObjectTracking<MutableLongState>(composable = AffectedComposable(name = "Content", pkg = "land.sungbin.androidplayground", filePath = "/Users/jisungbin/AndroidStudioProjects/AndroidPlayground/app/src/main/kotlin/land/sungbin/androidplayground/ir-dump-target.kt", startLine = 53, startColumn = 0), composableKeyName = "fun-Content()Unit/pkg-land.sungbin.androidplayground/file-ir-dump-target.kt", stateName = "ms")
w: transformStateInitializer: CALL 'public final fun registerStateObjectTracking <S> (composable: land.sungbin.composeinvestigator.runtime.affect.AffectedComposable, composableKeyName: kotlin.String, stateName: kotlin.String, stateValueGetter: land.sungbin.composeinvestigator.runtime.StateValueGetter): S of land.sungbin.composeinvestigator.runtime.StateObjectTrackerKt.registerStateObjectTracking declared in land.sungbin.composeinvestigator.runtime.StateObjectTrackerKt' type=androidx.compose.runtime.MutableLongState origin=StateChangeTrackerOrigin
  <S>: androidx.compose.runtime.MutableLongState
  $receiver: CALL 'public final fun remember <T> (calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=androidx.compose.runtime.MutableLongState origin=null
    <T>: androidx.compose.runtime.MutableLongState
    calculation: FUN_EXPR type=kotlin.Function0<androidx.compose.runtime.MutableLongState> origin=LAMBDA
      FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:androidx.compose.runtime.MutableLongState
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='local final fun <anonymous> (): androidx.compose.runtime.MutableLongState declared in land.sungbin.androidplayground.Content'
            CALL 'public final fun mutableLongStateOf (value: kotlin.Long): androidx.compose.runtime.MutableLongState declared in androidx.compose.runtime.SnapshotLongStateKt' type=androidx.compose.runtime.MutableLongState origin=null
              value: CALL 'public open fun currentTimeMillis (): kotlin.Long declared in java.lang.System' type=kotlin.Long origin=null
  composable: CONSTRUCTOR_CALL 'public constructor <init> (name: kotlin.String, pkg: kotlin.String, filePath: kotlin.String, startLine: kotlin.Int, startColumn: kotlin.Int) [primary] declared in land.sungbin.composeinvestigator.runtime.affect.AffectedComposable' type=land.sungbin.composeinvestigator.runtime.affect.AffectedComposable origin=null
    name: CONST String type=kotlin.String value="Content"
    pkg: CONST String type=kotlin.String value="land.sungbin.androidplayground"
    filePath: CONST String type=kotlin.String value="/Users/jisungbin/AndroidStudioProjects/AndroidPlayground/app/src/main/kotlin/land/sungbin/androidplayground/ir-dump-target.kt"
    startLine: CONST Int type=kotlin.Int value=53
    startColumn: CONST Int type=kotlin.Int value=0
  composableKeyName: CONST String type=kotlin.String value="fun-Content()Unit/pkg-land.sungbin.androidplayground/file-ir-dump-target.kt"
  stateName: CONST String type=kotlin.String value="ms"

w: transformStateInitializer: remember<MutableLongState>(calculation = local fun <anonymous>(): MutableLongState {
  return mutableLongStateOf(value = currentTimeMillis())
}
).registerStateObjectTracking<MutableLongState>(composable = AffectedComposable(name = "Content", pkg = "land.sungbin.androidplayground", filePath = "/Users/jisungbin/AndroidStudioProjects/AndroidPlayground/app/src/main/kotlin/land/sungbin/androidplayground/ir-dump-target.kt", startLine = 53, startColumn = 0), composableKeyName = "fun-Content()Unit/pkg-land.sungbin.androidplayground/file-ir-dump-target.kt", stateName = "ms")
w: dump: FILE fqName:land.sungbin.androidplayground fileName:/Users/jisungbin/AndroidStudioProjects/AndroidPlayground/app/src/main/kotlin/land/sungbin/androidplayground/ir-dump-target.kt
  PROPERTY name:ComposableInvalidationTrackTableImpl$Ir_dump_targetKt visibility:private modality:FINAL [val]
    FIELD name:ComposableInvalidationTrackTableImpl$Ir_dump_targetKt type:land.sungbin.composeinvestigator.runtime.ComposableInvalidationTrackTable visibility:private [final,static]
      EXPRESSION_BODY
        CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in land.sungbin.composeinvestigator.runtime.ComposableInvalidationTrackTable' type=land.sungbin.composeinvestigator.runtime.ComposableInvalidationTrackTable origin=null
    FUN DEFAULT_PROPERTY_ACCESSOR name:<get-ComposableInvalidationTrackTableImpl$Ir_dump_targetKt> visibility:private modality:FINAL <> () returnType:land.sungbin.composeinvestigator.runtime.ComposableInvalidationTrackTable
      correspondingProperty: PROPERTY name:ComposableInvalidationTrackTableImpl$Ir_dump_targetKt visibility:private modality:FINAL [val]
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='private final fun <get-ComposableInvalidationTrackTableImpl$Ir_dump_targetKt> (): land.sungbin.composeinvestigator.runtime.ComposableInvalidationTrackTable declared in land.sungbin.androidplayground'
          GET_FIELD 'FIELD name:ComposableInvalidationTrackTableImpl$Ir_dump_targetKt type:land.sungbin.composeinvestigator.runtime.ComposableInvalidationTrackTable visibility:private [final,static]' type=land.sungbin.composeinvestigator.runtime.ComposableInvalidationTrackTable origin=null
  FUN name:Content visibility:public modality:FINAL <> ($composer:androidx.compose.runtime.Composer?, $changed:kotlin.Int) returnType:kotlin.Unit
    annotations:
      Composable
      ComposableTarget(applier = 'androidx.compose.ui.UiComposable')
    VALUE_PARAMETER name:$composer index:0 type:androidx.compose.runtime.Composer? [assignable]
    VALUE_PARAMETER name:$changed index:1 type:kotlin.Int
    BLOCK_BODY
      SET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=kotlin.Unit origin=null
        CALL 'public abstract fun startRestartGroup (key: kotlin.Int): androidx.compose.runtime.Composer declared in androidx.compose.runtime.Composer' type=androidx.compose.runtime.Composer origin=null
          $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.Composer? origin=null
          key: CONST Int type=kotlin.Int value=716480202
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: WHEN type=kotlin.Boolean origin=OROR
            BRANCH
              if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
                  arg0: GET_VAR '$changed: kotlin.Int declared in land.sungbin.androidplayground.Content' type=kotlin.Int origin=null
                  arg1: CONST Int type=kotlin.Int value=0
              then: CONST Boolean type=kotlin.Boolean value=true
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                $this: CALL 'public abstract fun <get-skipping> (): kotlin.Boolean declared in androidx.compose.runtime.Composer' type=kotlin.Boolean origin=null
                  $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.Composer? origin=null
          then: BLOCK type=kotlin.Unit origin=null
            WHEN type=kotlin.Unit origin=IF
              BRANCH
                if: CALL 'public final fun isTraceInProgress (): kotlin.Boolean declared in androidx.compose.runtime.ComposerKt' type=kotlin.Boolean origin=null
                then: CALL 'public final fun traceEventStart (key: kotlin.Int, dirty1: kotlin.Int, dirty2: kotlin.Int, info: kotlin.String): kotlin.Unit declared in androidx.compose.runtime.ComposerKt' type=kotlin.Unit origin=null
                  key: CONST Int type=kotlin.Int value=716480202
                  dirty1: GET_VAR '$changed: kotlin.Int declared in land.sungbin.androidplayground.Content' type=kotlin.Int origin=null
                  dirty2: CONST Int type=kotlin.Int value=-1
                  info: CONST String type=kotlin.String value="land.sungbin.androidplayground.Content (ir-dump-target.kt:52)"
            VAR name:ms type:androidx.compose.runtime.MutableLongState [val]
              CALL 'public final fun registerStateObjectTracking <S> (composable: land.sungbin.composeinvestigator.runtime.affect.AffectedComposable, composableKeyName: kotlin.String, stateName: kotlin.String, stateValueGetter: land.sungbin.composeinvestigator.runtime.StateValueGetter): S of land.sungbin.composeinvestigator.runtime.StateObjectTrackerKt.registerStateObjectTracking declared in land.sungbin.composeinvestigator.runtime.StateObjectTrackerKt' type=androidx.compose.runtime.MutableLongState origin=StateChangeTrackerOrigin
                <S>: androidx.compose.runtime.MutableLongState
                $receiver: BLOCK type=androidx.compose.runtime.MutableLongState origin=null
                  CALL 'public abstract fun startReplaceableGroup (key: kotlin.Int): kotlin.Unit declared in androidx.compose.runtime.Composer' type=kotlin.Unit origin=null
                    $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.Composer? origin=null
                    key: CONST Int type=kotlin.Int value=-2022606377
                  VAR IR_TEMPORARY_VARIABLE name:tmp0_group type:androidx.compose.runtime.MutableLongState [val]
                    CALL 'public final fun cache <T> (invalid: kotlin.Boolean, block: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposerKt.cache>): T of androidx.compose.runtime.ComposerKt.cache [inline] declared in androidx.compose.runtime.ComposerKt' type=androidx.compose.runtime.MutableLongState origin=null
                      <T>: androidx.compose.runtime.MutableLongState
                      $receiver: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.Composer? origin=null
                      invalid: CONST Boolean type=kotlin.Boolean value=false
                      block: FUN_EXPR type=kotlin.Function0<androidx.compose.runtime.MutableLongState> origin=LAMBDA
                        FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:androidx.compose.runtime.MutableLongState
                          BLOCK_BODY
                            RETURN type=kotlin.Nothing from='local final fun <anonymous> (): androidx.compose.runtime.MutableLongState declared in land.sungbin.androidplayground.Content'
                              CALL 'public final fun mutableLongStateOf (value: kotlin.Long): androidx.compose.runtime.MutableLongState declared in androidx.compose.runtime.SnapshotLongStateKt' type=androidx.compose.runtime.MutableLongState origin=null
                                value: CALL 'public open fun currentTimeMillis (): kotlin.Long declared in java.lang.System' type=kotlin.Long origin=null
                  CALL 'public abstract fun endReplaceableGroup (): kotlin.Unit declared in androidx.compose.runtime.Composer' type=kotlin.Unit origin=null
                    $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.Composer? origin=null
                  GET_VAR 'val tmp0_group: androidx.compose.runtime.MutableLongState [val] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.MutableLongState origin=null
                composable: CONSTRUCTOR_CALL 'public constructor <init> (name: kotlin.String, pkg: kotlin.String, filePath: kotlin.String, startLine: kotlin.Int, startColumn: kotlin.Int) [primary] declared in land.sungbin.composeinvestigator.runtime.affect.AffectedComposable' type=land.sungbin.composeinvestigator.runtime.affect.AffectedComposable origin=null
                  name: CONST String type=kotlin.String value="Content"
                  pkg: CONST String type=kotlin.String value="land.sungbin.androidplayground"
                  filePath: CONST String type=kotlin.String value="/Users/jisungbin/AndroidStudioProjects/AndroidPlayground/app/src/main/kotlin/land/sungbin/androidplayground/ir-dump-target.kt"
                  startLine: CONST Int type=kotlin.Int value=53
                  startColumn: CONST Int type=kotlin.Int value=0
                composableKeyName: CONST String type=kotlin.String value="fun-Content()Unit/pkg-land.sungbin.androidplayground/file-ir-dump-target.kt"
                stateName: CONST String type=kotlin.String value="ms"
            CALL 'public final fun Button (onClick: kotlin.Function0<kotlin.Unit>, modifier: androidx.compose.ui.Modifier?, enabled: kotlin.Boolean, shape: androidx.compose.ui.graphics.Shape?, colors: androidx.compose.material3.ButtonColors?, elevation: androidx.compose.material3.ButtonElevation?, border: androidx.compose.foundation.BorderStroke?, contentPadding: androidx.compose.foundation.layout.PaddingValues?, interactionSource: androidx.compose.foundation.interaction.MutableInteractionSource?, content: @[ExtensionFunctionType] kotlin.Function3<androidx.compose.foundation.layout.RowScope, androidx.compose.runtime.Composer, kotlin.Int, kotlin.Unit>, $composer: androidx.compose.runtime.Composer?, $changed: kotlin.Int, $default: kotlin.Int): kotlin.Unit declared in androidx.compose.material3.ButtonKt' type=kotlin.Unit origin=null
              onClick: BLOCK type=kotlin.Function0<kotlin.Unit> origin=null
                CALL 'public abstract fun startReplaceableGroup (key: kotlin.Int): kotlin.Unit declared in androidx.compose.runtime.Composer' type=kotlin.Unit origin=null
                  $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.Composer? origin=null
                  key: CONST Int type=kotlin.Int value=-2022606298
                VAR IR_TEMPORARY_VARIABLE name:tmp1_group type:kotlin.Function0<kotlin.Unit> [val]
                  CALL 'public final fun cache <T> (invalid: kotlin.Boolean, block: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposerKt.cache>): T of androidx.compose.runtime.ComposerKt.cache [inline] declared in androidx.compose.runtime.ComposerKt' type=kotlin.Function0<kotlin.Unit> origin=null
                    <T>: kotlin.Function0<kotlin.Unit>
                    $receiver: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.Composer? origin=null
                    invalid: CALL 'public abstract fun changed (value: kotlin.Any?): kotlin.Boolean declared in androidx.compose.runtime.Composer' type=kotlin.Boolean origin=null
                      $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.Composer? origin=null
                      value: GET_VAR 'val ms: androidx.compose.runtime.MutableLongState [val] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.MutableLongState origin=null
                    block: FUN_EXPR type=kotlin.Function0<kotlin.Function0<kotlin.Unit>> origin=LAMBDA
                      FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:kotlin.Function0<kotlin.Unit>
                        BLOCK_BODY
                          RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Function0<kotlin.Unit> declared in land.sungbin.androidplayground.Content'
                            FUN_EXPR type=kotlin.Function0<kotlin.Unit> origin=LAMBDA
                              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> () returnType:kotlin.Unit
                                BLOCK_BODY
                                  CALL 'public abstract fun <set-longValue> (<set-?>: kotlin.Long): kotlin.Unit declared in androidx.compose.runtime.MutableLongState' type=kotlin.Unit origin=EQ
                                    $this: GET_VAR 'val ms: androidx.compose.runtime.MutableLongState [val] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.MutableLongState origin=null
                                    <set-?>: CALL 'public open fun currentTimeMillis (): kotlin.Long declared in java.lang.System' type=kotlin.Long origin=null
                CALL 'public abstract fun endReplaceableGroup (): kotlin.Unit declared in androidx.compose.runtime.Composer' type=kotlin.Unit origin=null
                  $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.Composer? origin=null
                GET_VAR 'val tmp1_group: kotlin.Function0<kotlin.Unit> [val] declared in land.sungbin.androidplayground.Content' type=kotlin.Function0<kotlin.Unit> origin=null
              modifier: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              enabled: COMPOSITE type=kotlin.Boolean origin=DEFAULT_VALUE
                CONST Boolean type=kotlin.Boolean value=false
              shape: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              colors: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              elevation: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              border: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              contentPadding: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              interactionSource: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              content: CALL 'internal final fun <get-lambda-1> (): @[ExtensionFunctionType] kotlin.Function3<androidx.compose.foundation.layout.RowScope, androidx.compose.runtime.Composer, kotlin.Int, kotlin.Unit> declared in land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt' type=@[ExtensionFunctionType] kotlin.Function3<androidx.compose.foundation.layout.RowScope, androidx.compose.runtime.Composer, kotlin.Int, kotlin.Unit> origin=null
                $this: GET_OBJECT 'CLASS OBJECT name:ComposableSingletons$Ir_dump_targetKt modality:FINAL visibility:internal superTypes:[]' type=land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt
              $composer: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.Composer? origin=null
              $changed: CONST Int type=kotlin.Int value=805306368
              $default: CONST Int type=kotlin.Int value=510
            CALL 'private final fun Display (text: kotlin.String, $composer: androidx.compose.runtime.Composer?, $changed: kotlin.Int): kotlin.Unit declared in land.sungbin.androidplayground' type=kotlin.Unit origin=null
              text: CALL 'public open fun toString (): kotlin.String declared in kotlin.Long' type=kotlin.String origin=null
                $this: CALL 'public abstract fun <get-longValue> (): kotlin.Long declared in androidx.compose.runtime.MutableLongState' type=kotlin.Long origin=GET_PROPERTY
                  $this: GET_VAR 'val ms: androidx.compose.runtime.MutableLongState [val] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.MutableLongState origin=null
              $composer: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.Composer? origin=null
              $changed: CONST Int type=kotlin.Int value=0
            WHEN type=kotlin.Unit origin=IF
              BRANCH
                if: CALL 'public final fun isTraceInProgress (): kotlin.Boolean declared in androidx.compose.runtime.ComposerKt' type=kotlin.Boolean origin=null
                then: CALL 'public final fun traceEventEnd (): kotlin.Unit declared in androidx.compose.runtime.ComposerKt' type=kotlin.Unit origin=null
        BRANCH
          if: CONST Boolean type=kotlin.Boolean value=true
          then: CALL 'public abstract fun skipToGroupEnd (): kotlin.Unit declared in androidx.compose.runtime.Composer' type=kotlin.Unit origin=null
            $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.Composer? origin=null
      BLOCK type=kotlin.Unit origin=null
        BLOCK type=kotlin.Unit origin=SAFE_CALL
          VAR IR_TEMPORARY_VARIABLE name:tmp2_safe_receiver type:androidx.compose.runtime.ScopeUpdateScope? [val]
            CALL 'public abstract fun endRestartGroup (): androidx.compose.runtime.ScopeUpdateScope? declared in androidx.compose.runtime.Composer' type=androidx.compose.runtime.ScopeUpdateScope? origin=null
              $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.Composer? origin=null
          WHEN type=kotlin.Unit origin=IF
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
                arg0: GET_VAR 'val tmp2_safe_receiver: androidx.compose.runtime.ScopeUpdateScope? [val] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.ScopeUpdateScope? origin=null
                arg1: CONST Null type=kotlin.Any? value=null
              then: CONST Null type=kotlin.Any? value=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CALL 'public abstract fun updateScope (block: kotlin.Function2<androidx.compose.runtime.Composer, kotlin.Int, kotlin.Unit>): kotlin.Unit declared in androidx.compose.runtime.ScopeUpdateScope' type=kotlin.Unit origin=null
                $this: GET_VAR 'val tmp2_safe_receiver: androidx.compose.runtime.ScopeUpdateScope? [val] declared in land.sungbin.androidplayground.Content' type=androidx.compose.runtime.ScopeUpdateScope? origin=null
                block: FUN_EXPR type=kotlin.Function2<androidx.compose.runtime.Composer?, kotlin.Int, kotlin.Unit> origin=LAMBDA
                  FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> ($composer:androidx.compose.runtime.Composer?, $force:kotlin.Int) returnType:kotlin.Unit
                    VALUE_PARAMETER name:$composer index:0 type:androidx.compose.runtime.Composer?
                    VALUE_PARAMETER name:$force index:1 type:kotlin.Int
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from='local final fun <anonymous> ($composer: androidx.compose.runtime.Composer?, $force: kotlin.Int): kotlin.Unit declared in land.sungbin.androidplayground.Content'
                        CALL 'public final fun Content ($composer: androidx.compose.runtime.Composer?, $changed: kotlin.Int): kotlin.Unit declared in land.sungbin.androidplayground' type=kotlin.Unit origin=null
                          $composer: GET_VAR '$composer: androidx.compose.runtime.Composer? declared in land.sungbin.androidplayground.Content.<anonymous>' type=androidx.compose.runtime.Composer? origin=null
                          $changed: CALL 'internal final fun updateChangedFlags (flags: kotlin.Int): kotlin.Int declared in androidx.compose.runtime.RecomposeScopeImplKt' type=kotlin.Int origin=null
                            flags: CALL 'public final fun or (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
                              $this: GET_VAR '$changed: kotlin.Int declared in land.sungbin.androidplayground.Content' type=kotlin.Int origin=null
                              other: CONST Int type=kotlin.Int value=1
  FUN name:Display visibility:private modality:FINAL <> (text:kotlin.String, $composer:androidx.compose.runtime.Composer?, $changed:kotlin.Int) returnType:kotlin.Unit
    annotations:
      Composable
      ComposableTarget(applier = 'androidx.compose.ui.UiComposable')
    VALUE_PARAMETER name:text index:0 type:kotlin.String
    VALUE_PARAMETER name:$composer index:1 type:androidx.compose.runtime.Composer? [assignable]
    VALUE_PARAMETER name:$changed index:2 type:kotlin.Int
    BLOCK_BODY
      SET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Display' type=kotlin.Unit origin=null
        CALL 'public abstract fun startRestartGroup (key: kotlin.Int): androidx.compose.runtime.Composer declared in androidx.compose.runtime.Composer' type=androidx.compose.runtime.Composer origin=null
          $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Display' type=androidx.compose.runtime.Composer? origin=null
          key: CONST Int type=kotlin.Int value=-371844158
      VAR name:$dirty type:kotlin.Int [val]
        GET_VAR '$changed: kotlin.Int declared in land.sungbin.androidplayground.Display' type=kotlin.Int origin=null
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
            arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR '$changed: kotlin.Int declared in land.sungbin.androidplayground.Display' type=kotlin.Int origin=null
              other: CONST Int type=kotlin.Int value=14
            arg1: CONST Int type=kotlin.Int value=0
          then: SET_VAR 'val $dirty: kotlin.Int [val] declared in land.sungbin.androidplayground.Display' type=kotlin.Unit origin=null
            CALL 'public final fun or (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
              $this: GET_VAR 'val $dirty: kotlin.Int [val] declared in land.sungbin.androidplayground.Display' type=kotlin.Int origin=null
              other: WHEN type=kotlin.Int origin=IF
                BRANCH
                  if: CALL 'public abstract fun changed (value: kotlin.Any?): kotlin.Boolean declared in androidx.compose.runtime.Composer' type=kotlin.Boolean origin=null
                    $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Display' type=androidx.compose.runtime.Composer? origin=null
                    value: GET_VAR 'text: kotlin.String declared in land.sungbin.androidplayground.Display' type=kotlin.String origin=null
                  then: CONST Int type=kotlin.Int value=4
                BRANCH
                  if: CONST Boolean type=kotlin.Boolean value=true
                  then: CONST Int type=kotlin.Int value=2
      WHEN type=kotlin.Unit origin=IF
        BRANCH
          if: WHEN type=kotlin.Boolean origin=OROR
            BRANCH
              if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
                  arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
                    $this: GET_VAR 'val $dirty: kotlin.Int [val] declared in land.sungbin.androidplayground.Display' type=kotlin.Int origin=null
                    other: CONST Int type=kotlin.Int value=11
                  arg1: CONST Int type=kotlin.Int value=2
              then: CONST Boolean type=kotlin.Boolean value=true
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                $this: CALL 'public abstract fun <get-skipping> (): kotlin.Boolean declared in androidx.compose.runtime.Composer' type=kotlin.Boolean origin=null
                  $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Display' type=androidx.compose.runtime.Composer? origin=null
          then: BLOCK type=kotlin.Unit origin=null
            WHEN type=kotlin.Unit origin=IF
              BRANCH
                if: CALL 'public final fun isTraceInProgress (): kotlin.Boolean declared in androidx.compose.runtime.ComposerKt' type=kotlin.Boolean origin=null
                then: CALL 'public final fun traceEventStart (key: kotlin.Int, dirty1: kotlin.Int, dirty2: kotlin.Int, info: kotlin.String): kotlin.Unit declared in androidx.compose.runtime.ComposerKt' type=kotlin.Unit origin=null
                  key: CONST Int type=kotlin.Int value=-371844158
                  dirty1: GET_VAR 'val $dirty: kotlin.Int [val] declared in land.sungbin.androidplayground.Display' type=kotlin.Int origin=null
                  dirty2: CONST Int type=kotlin.Int value=-1
                  info: CONST String type=kotlin.String value="land.sungbin.androidplayground.Display (ir-dump-target.kt:59)"
            CALL 'public final fun Text (text: kotlin.String, modifier: androidx.compose.ui.Modifier?, color: androidx.compose.ui.graphics.Color, fontSize: androidx.compose.ui.unit.TextUnit, fontStyle: androidx.compose.ui.text.font.FontStyle?, fontWeight: androidx.compose.ui.text.font.FontWeight?, fontFamily: androidx.compose.ui.text.font.FontFamily?, letterSpacing: androidx.compose.ui.unit.TextUnit, textDecoration: androidx.compose.ui.text.style.TextDecoration?, textAlign: androidx.compose.ui.text.style.TextAlign?, lineHeight: androidx.compose.ui.unit.TextUnit, overflow: androidx.compose.ui.text.style.TextOverflow, softWrap: kotlin.Boolean, maxLines: kotlin.Int, minLines: kotlin.Int, onTextLayout: kotlin.Function1<androidx.compose.ui.text.TextLayoutResult, kotlin.Unit>?, style: androidx.compose.ui.text.TextStyle?, $composer: androidx.compose.runtime.Composer?, $changed: kotlin.Int, $changed1: kotlin.Int, $default: kotlin.Int): kotlin.Unit declared in androidx.compose.material3.TextKt' type=kotlin.Unit origin=null
              text: GET_VAR 'text: kotlin.String declared in land.sungbin.androidplayground.Display' type=kotlin.String origin=null
              modifier: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              color: COMPOSITE type=androidx.compose.ui.graphics.Color origin=DEFAULT_VALUE
                CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.graphics.Color origin=null
                  <T>: kotlin.Long
                  <R>: androidx.compose.ui.graphics.Color
                  v: CONST Long type=kotlin.Long value=0
              fontSize: COMPOSITE type=androidx.compose.ui.unit.TextUnit origin=DEFAULT_VALUE
                CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.unit.TextUnit origin=null
                  <T>: kotlin.Long
                  <R>: androidx.compose.ui.unit.TextUnit
                  v: CONST Long type=kotlin.Long value=0
              fontStyle: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              fontWeight: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              fontFamily: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              letterSpacing: COMPOSITE type=androidx.compose.ui.unit.TextUnit origin=DEFAULT_VALUE
                CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.unit.TextUnit origin=null
                  <T>: kotlin.Long
                  <R>: androidx.compose.ui.unit.TextUnit
                  v: CONST Long type=kotlin.Long value=0
              textDecoration: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              textAlign: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              lineHeight: COMPOSITE type=androidx.compose.ui.unit.TextUnit origin=DEFAULT_VALUE
                CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.unit.TextUnit origin=null
                  <T>: kotlin.Long
                  <R>: androidx.compose.ui.unit.TextUnit
                  v: CONST Long type=kotlin.Long value=0
              overflow: COMPOSITE type=androidx.compose.ui.text.style.TextOverflow origin=DEFAULT_VALUE
                CALL 'public final fun <unsafe-coerce> <T, R> (v: T of kotlin.jvm.internal.<unsafe-coerce>): R of kotlin.jvm.internal.<unsafe-coerce> declared in kotlin.jvm.internal' type=androidx.compose.ui.text.style.TextOverflow origin=null
                  <T>: kotlin.Int
                  <R>: androidx.compose.ui.text.style.TextOverflow
                  v: CONST Int type=kotlin.Int value=0
              softWrap: COMPOSITE type=kotlin.Boolean origin=DEFAULT_VALUE
                CONST Boolean type=kotlin.Boolean value=false
              maxLines: COMPOSITE type=kotlin.Int origin=DEFAULT_VALUE
                CONST Int type=kotlin.Int value=0
              minLines: COMPOSITE type=kotlin.Int origin=DEFAULT_VALUE
                CONST Int type=kotlin.Int value=0
              onTextLayout: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              style: COMPOSITE type=kotlin.Nothing? origin=DEFAULT_VALUE
                CONST Null type=kotlin.Nothing? value=null
              $composer: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Display' type=androidx.compose.runtime.Composer? origin=null
              $changed: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
                $this: CONST Int type=kotlin.Int value=14
                other: GET_VAR 'val $dirty: kotlin.Int [val] declared in land.sungbin.androidplayground.Display' type=kotlin.Int origin=null
              $changed1: CONST Int type=kotlin.Int value=0
              $default: CONST Int type=kotlin.Int value=131070
            WHEN type=kotlin.Unit origin=IF
              BRANCH
                if: CALL 'public final fun isTraceInProgress (): kotlin.Boolean declared in androidx.compose.runtime.ComposerKt' type=kotlin.Boolean origin=null
                then: CALL 'public final fun traceEventEnd (): kotlin.Unit declared in androidx.compose.runtime.ComposerKt' type=kotlin.Unit origin=null
        BRANCH
          if: CONST Boolean type=kotlin.Boolean value=true
          then: CALL 'public abstract fun skipToGroupEnd (): kotlin.Unit declared in androidx.compose.runtime.Composer' type=kotlin.Unit origin=null
            $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Display' type=androidx.compose.runtime.Composer? origin=null
      BLOCK type=kotlin.Unit origin=null
        BLOCK type=kotlin.Unit origin=SAFE_CALL
          VAR IR_TEMPORARY_VARIABLE name:tmp0_safe_receiver type:androidx.compose.runtime.ScopeUpdateScope? [val]
            CALL 'public abstract fun endRestartGroup (): androidx.compose.runtime.ScopeUpdateScope? declared in androidx.compose.runtime.Composer' type=androidx.compose.runtime.ScopeUpdateScope? origin=null
              $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.Display' type=androidx.compose.runtime.Composer? origin=null
          WHEN type=kotlin.Unit origin=IF
            BRANCH
              if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
                arg0: GET_VAR 'val tmp0_safe_receiver: androidx.compose.runtime.ScopeUpdateScope? [val] declared in land.sungbin.androidplayground.Display' type=androidx.compose.runtime.ScopeUpdateScope? origin=null
                arg1: CONST Null type=kotlin.Any? value=null
              then: CONST Null type=kotlin.Any? value=null
            BRANCH
              if: CONST Boolean type=kotlin.Boolean value=true
              then: CALL 'public abstract fun updateScope (block: kotlin.Function2<androidx.compose.runtime.Composer, kotlin.Int, kotlin.Unit>): kotlin.Unit declared in androidx.compose.runtime.ScopeUpdateScope' type=kotlin.Unit origin=null
                $this: GET_VAR 'val tmp0_safe_receiver: androidx.compose.runtime.ScopeUpdateScope? [val] declared in land.sungbin.androidplayground.Display' type=androidx.compose.runtime.ScopeUpdateScope? origin=null
                block: FUN_EXPR type=kotlin.Function2<androidx.compose.runtime.Composer?, kotlin.Int, kotlin.Unit> origin=LAMBDA
                  FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> ($composer:androidx.compose.runtime.Composer?, $force:kotlin.Int) returnType:kotlin.Unit
                    VALUE_PARAMETER name:$composer index:0 type:androidx.compose.runtime.Composer?
                    VALUE_PARAMETER name:$force index:1 type:kotlin.Int
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from='local final fun <anonymous> ($composer: androidx.compose.runtime.Composer?, $force: kotlin.Int): kotlin.Unit declared in land.sungbin.androidplayground.Display'
                        CALL 'private final fun Display (text: kotlin.String, $composer: androidx.compose.runtime.Composer?, $changed: kotlin.Int): kotlin.Unit declared in land.sungbin.androidplayground' type=kotlin.Unit origin=null
                          text: GET_VAR 'text: kotlin.String declared in land.sungbin.androidplayground.Display' type=kotlin.String origin=null
                          $composer: GET_VAR '$composer: androidx.compose.runtime.Composer? declared in land.sungbin.androidplayground.Display.<anonymous>' type=androidx.compose.runtime.Composer? origin=null
                          $changed: CALL 'internal final fun updateChangedFlags (flags: kotlin.Int): kotlin.Int declared in androidx.compose.runtime.RecomposeScopeImplKt' type=kotlin.Int origin=null
                            flags: CALL 'public final fun or (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
                              $this: GET_VAR '$changed: kotlin.Int declared in land.sungbin.androidplayground.Display' type=kotlin.Int origin=null
                              other: CONST Int type=kotlin.Int value=1
  CLASS OBJECT name:ComposableSingletons$Ir_dump_targetKt modality:FINAL visibility:internal superTypes:[]
    $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt
    CONSTRUCTOR visibility:public <> () returnType:land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS OBJECT name:ComposableSingletons$Ir_dump_targetKt modality:FINAL visibility:internal superTypes:[]'
    PROPERTY name:lambda-1 visibility:internal modality:FINAL [val]
      FIELD name:lambda-1 type:@[ExtensionFunctionType] kotlin.Function3<androidx.compose.foundation.layout.RowScope, androidx.compose.runtime.Composer, kotlin.Int, kotlin.Unit> visibility:internal [static]
        EXPRESSION_BODY
          CALL 'public final fun composableLambdaInstance (key: kotlin.Int, tracked: kotlin.Boolean, block: kotlin.Any): androidx.compose.runtime.internal.ComposableLambda declared in androidx.compose.runtime.internal.ComposableLambdaKt' type=androidx.compose.runtime.internal.ComposableLambda origin=null
            key: CONST Int type=kotlin.Int value=1937033914
            tracked: CONST Boolean type=kotlin.Boolean value=false
            block: FUN_EXPR type=@[ExtensionFunctionType] kotlin.Function3<androidx.compose.foundation.layout.RowScope, androidx.compose.runtime.Composer, kotlin.Int, kotlin.Unit> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> ($receiver:androidx.compose.foundation.layout.RowScope, $composer:androidx.compose.runtime.Composer?, $changed:kotlin.Int) returnType:kotlin.Unit
                annotations:
                  Composable
                  ComposableTarget(applier = 'androidx.compose.ui.UiComposable')
                $receiver: VALUE_PARAMETER name:$this$Button type:androidx.compose.foundation.layout.RowScope
                VALUE_PARAMETER name:$composer index:0 type:androidx.compose.runtime.Composer? [assignable]
                VALUE_PARAMETER name:$changed index:1 type:kotlin.Int
                BLOCK_BODY
                  WHEN type=kotlin.Unit origin=IF
                    BRANCH
                      if: WHEN type=kotlin.Boolean origin=OROR
                        BRANCH
                          if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                            $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=null
                              arg0: CALL 'public final fun and (other: kotlin.Int): kotlin.Int [infix] declared in kotlin.Int' type=kotlin.Int origin=null
                                $this: GET_VAR '$changed: kotlin.Int declared in land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt.lambda-1.<anonymous>' type=kotlin.Int origin=null
                                other: CONST Int type=kotlin.Int value=81
                              arg1: CONST Int type=kotlin.Int value=16
                          then: CONST Boolean type=kotlin.Boolean value=true
                        BRANCH
                          if: CONST Boolean type=kotlin.Boolean value=true
                          then: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=null
                            $this: CALL 'public abstract fun <get-skipping> (): kotlin.Boolean declared in androidx.compose.runtime.Composer' type=kotlin.Boolean origin=null
                              $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt.lambda-1.<anonymous>' type=androidx.compose.runtime.Composer? origin=null
                      then: BLOCK type=kotlin.Unit origin=null
                        WHEN type=kotlin.Unit origin=IF
                          BRANCH
                            if: CALL 'public final fun isTraceInProgress (): kotlin.Boolean declared in androidx.compose.runtime.ComposerKt' type=kotlin.Boolean origin=null
                            then: CALL 'public final fun traceEventStart (key: kotlin.Int, dirty1: kotlin.Int, dirty2: kotlin.Int, info: kotlin.String): kotlin.Unit declared in androidx.compose.runtime.ComposerKt' type=kotlin.Unit origin=null
                              key: CONST Int type=kotlin.Int value=1937033914
                              dirty1: GET_VAR '$changed: kotlin.Int declared in land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt.lambda-1.<anonymous>' type=kotlin.Int origin=null
                              dirty2: CONST Int type=kotlin.Int value=-1
                              info: CONST String type=kotlin.String value="land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt.lambda-1.<anonymous> (ir-dump-target.kt:54)"
                        GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
                        WHEN type=kotlin.Unit origin=IF
                          BRANCH
                            if: CALL 'public final fun isTraceInProgress (): kotlin.Boolean declared in androidx.compose.runtime.ComposerKt' type=kotlin.Boolean origin=null
                            then: CALL 'public final fun traceEventEnd (): kotlin.Unit declared in androidx.compose.runtime.ComposerKt' type=kotlin.Unit origin=null
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CALL 'public abstract fun skipToGroupEnd (): kotlin.Unit declared in androidx.compose.runtime.Composer' type=kotlin.Unit origin=null
                        $this: GET_VAR '$composer: androidx.compose.runtime.Composer? [assignable] declared in land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt.lambda-1.<anonymous>' type=androidx.compose.runtime.Composer? origin=null
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-lambda-1> visibility:internal modality:FINAL <> ($this:land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt) returnType:@[ExtensionFunctionType] kotlin.Function3<androidx.compose.foundation.layout.RowScope, androidx.compose.runtime.Composer, kotlin.Int, kotlin.Unit>
        correspondingProperty: PROPERTY name:lambda-1 visibility:internal modality:FINAL [val]
        $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='internal final fun <get-lambda-1> (): @[ExtensionFunctionType] kotlin.Function3<androidx.compose.foundation.layout.RowScope, androidx.compose.runtime.Composer, kotlin.Int, kotlin.Unit> declared in land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt'
            GET_FIELD 'FIELD name:lambda-1 type:@[ExtensionFunctionType] kotlin.Function3<androidx.compose.foundation.layout.RowScope, androidx.compose.runtime.Composer, kotlin.Int, kotlin.Unit> visibility:internal [static]' type=@[ExtensionFunctionType] kotlin.Function3<androidx.compose.foundation.layout.RowScope, androidx.compose.runtime.Composer, kotlin.Int, kotlin.Unit> origin=null
              receiver: GET_VAR '<this>: land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt declared in land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt.<get-lambda-1>' type=land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt origin=null

w:


w: dumpSrc: val ComposableInvalidationTrackTableImpl$Ir_dump_targetKt: ComposableInvalidationTrackTable = ComposableInvalidationTrackTable()
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun Content($composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(716480202)
  if ($changed != 0 || !$composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(716480202, $changed, -1, "land.sungbin.androidplayground.Content (ir-dump-target.kt:52)")
    }
    val ms = $composer.startReplaceableGroup(-2022606377)
    val tmp0_group = $composer.cache(false) {
      mutableLongStateOf(currentTimeMillis())
    }
    $composer.endReplaceableGroup()
    tmp0_group.registerStateObjectTracking(
      composable = AffectedComposable("Content", "land.sungbin.androidplayground", "/Users/jisungbin/AndroidStudioProjects/AndroidPlayground/app/src/main/kotlin/land/sungbin/androidplayground/ir-dump-target.kt", 53, 0),
      composableKeyName = "fun-Content()Unit/pkg-land.sungbin.androidplayground/file-ir-dump-target.kt",
      stateName = "ms"
    )
    Button(<block>{
      $composer.startReplaceableGroup(-2022606298)
      val tmp1_group = $composer.cache($composer.changed(ms)) {
        {
          ms.longValue = currentTimeMillis()
        }
      }
      $composer.endReplaceableGroup()
      tmp1_group
    }, null, false, null, null, null, null, null, null, ComposableSingletons$Ir_dump_targetKt.lambda-1, $composer, 0b00110000000000000000000000000000, 0b000111111110)
    Display(ms.longValue.toString(), $composer, 0)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    Content($composer, updateChangedFlags($changed or 0b0001))
  }
}
@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun Display(text: String, $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(-371844158)
  val $dirty = $changed
  if ($changed and 0b1110 == 0) {
    $dirty = $dirty or if ($composer.changed(text)) 0b0100 else 0b0010
  }
  if ($dirty and 0b1011 != 0b0010 || !$composer.skipping) {
    if (isTraceInProgress()) {
      traceEventStart(-371844158, $dirty, -1, "land.sungbin.androidplayground.Display (ir-dump-target.kt:59)")
    }
    Text(text, null, <unsafe-coerce>(0L), <unsafe-coerce>(0L), null, null, null, <unsafe-coerce>(0L), null, null, <unsafe-coerce>(0L), <unsafe-coerce>(0), false, 0, 0, null, null, $composer, 0b1110 and $dirty, 0, 0b00011111111111111110)
    if (isTraceInProgress()) {
      traceEventEnd()
    }
  } else {
    $composer.skipToGroupEnd()
  }
  $composer.endRestartGroup()?.updateScope { $composer: Composer?, $force: Int ->
    Display(text, $composer, updateChangedFlags($changed or 0b0001))
  }
}
internal object ComposableSingletons$Ir_dump_targetKt {
  val lambda-1: @[ExtensionFunctionType] Function3<RowScope, Composer, Int, Unit> = composableLambdaInstance(1937033914, false) { $composer: Composer?, $changed: Int ->
    if ($changed and 0b01010001 != 0b00010000 || !$composer.skipping) {
      if (isTraceInProgress()) {
        traceEventStart(1937033914, $changed, -1, "land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt.lambda-1.<anonymous> (ir-dump-target.kt:54)")
      }
      Unit
      if (isTraceInProgress()) {
        traceEventEnd()
      }
    } else {
      $composer.skipToGroupEnd()
    }
  }
}
w: dumpKotlinLike: // FILE: ir-dump-target.kt
// path: /Users/jisungbin/AndroidStudioProjects/AndroidPlayground/app/src/main/kotlin/land/sungbin/androidplayground/ir-dump-target.kt
package land.sungbin.androidplayground

private val ComposableInvalidationTrackTableImpl$Ir_dump_targetKt: ComposableInvalidationTrackTable
  field = ComposableInvalidationTrackTable()
  private get

@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
fun Content(/* var */ $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(key = 716480202)
  when {
    when {
      EQEQ(arg0 = $changed, arg1 = 0).not() -> true
      else -> $composer.<get-skipping>().not()
    } -> { // BLOCK
      when {
        isTraceInProgress() -> traceEventStart(key = 716480202, dirty1 = $changed, dirty2 = -1, info = "land.sungbin.androidplayground.Content (ir-dump-target.kt:52)")
      }
      val ms: MutableLongState = { // BLOCK
        $composer.startReplaceableGroup(key = -2022606377)
        val tmp0_group: MutableLongState = $composer.cache<MutableLongState>(invalid = false, block = local fun <anonymous>(): MutableLongState {
          return mutableLongStateOf(value = currentTimeMillis())
        }
)
        $composer.endReplaceableGroup()
        tmp0_group
      }.registerStateObjectTracking<MutableLongState>(composable = AffectedComposable(name = "Content", pkg = "land.sungbin.androidplayground", filePath = "/Users/jisungbin/AndroidStudioProjects/AndroidPlayground/app/src/main/kotlin/land/sungbin/androidplayground/ir-dump-target.kt", startLine = 53, startColumn = 0), composableKeyName = "fun-Content()Unit/pkg-land.sungbin.androidplayground/file-ir-dump-target.kt", stateName = "ms")
      Button(onClick = { // BLOCK
        $composer.startReplaceableGroup(key = -2022606298)
        val tmp1_group: Function0<Unit> = $composer.cache<Function0<Unit>>(invalid = $composer.changed(value = ms), block = local fun <anonymous>(): Function0<Unit> {
          return local fun <anonymous>() {
            ms.<set-longValue>(<set-?> = currentTimeMillis())
          }

        }
)
        $composer.endReplaceableGroup()
        tmp1_group
      }, modifier = // COMPOSITE {
      null
      // }, enabled = // COMPOSITE {
      false
      // }, shape = // COMPOSITE {
      null
      // }, colors = // COMPOSITE {
      null
      // }, elevation = // COMPOSITE {
      null
      // }, border = // COMPOSITE {
      null
      // }, contentPadding = // COMPOSITE {
      null
      // }, interactionSource = // COMPOSITE {
      null
      // }, content = ComposableSingletons$Ir_dump_targetKt.<get-lambda-1>(), $composer = $composer, $changed = 805306368, $default = 510)
      Display(text = ms.<get-longValue>().toString(), $composer = $composer, $changed = 0)
      when {
        isTraceInProgress() -> traceEventEnd()
      }
    }
    else -> $composer.skipToGroupEnd()
  }
  { // BLOCK
    { // BLOCK
      val tmp2_safe_receiver: ScopeUpdateScope? = $composer.endRestartGroup()
      when {
        EQEQ(arg0 = tmp2_safe_receiver, arg1 = null) -> null
        else -> tmp2_safe_receiver.updateScope(block = local fun <anonymous>($composer: Composer?, $force: Int) {
          return Content($composer = $composer, $changed = updateChangedFlags(flags = $changed.or(other = 1)))
        }
)
      }
    }
  }
}

@Composable
@ComposableTarget(applier = "androidx.compose.ui.UiComposable")
private fun Display(text: String, /* var */ $composer: Composer?, $changed: Int) {
  $composer = $composer.startRestartGroup(key = -371844158)
  val $dirty: Int = $changed
  when {
    EQEQ(arg0 = $changed.and(other = 14), arg1 = 0) -> $dirty = $dirty.or(other = when {
      $composer.changed(value = text) -> 4
      else -> 2
    })
  }
  when {
    when {
      EQEQ(arg0 = $dirty.and(other = 11), arg1 = 2).not() -> true
      else -> $composer.<get-skipping>().not()
    } -> { // BLOCK
      when {
        isTraceInProgress() -> traceEventStart(key = -371844158, dirty1 = $dirty, dirty2 = -1, info = "land.sungbin.androidplayground.Display (ir-dump-target.kt:59)")
      }
      Text(text = text, modifier = // COMPOSITE {
      null
      // }, color = // COMPOSITE {
      <unsafe-coerce><Long, Color>(v = 0L)
      // }, fontSize = // COMPOSITE {
      <unsafe-coerce><Long, TextUnit>(v = 0L)
      // }, fontStyle = // COMPOSITE {
      null
      // }, fontWeight = // COMPOSITE {
      null
      // }, fontFamily = // COMPOSITE {
      null
      // }, letterSpacing = // COMPOSITE {
      <unsafe-coerce><Long, TextUnit>(v = 0L)
      // }, textDecoration = // COMPOSITE {
      null
      // }, textAlign = // COMPOSITE {
      null
      // }, lineHeight = // COMPOSITE {
      <unsafe-coerce><Long, TextUnit>(v = 0L)
      // }, overflow = // COMPOSITE {
      <unsafe-coerce><Int, TextOverflow>(v = 0)
      // }, softWrap = // COMPOSITE {
      false
      // }, maxLines = // COMPOSITE {
      0
      // }, minLines = // COMPOSITE {
      0
      // }, onTextLayout = // COMPOSITE {
      null
      // }, style = // COMPOSITE {
      null
      // }, $composer = $composer, $changed = 14.and(other = $dirty), $changed1 = 0, $default = 131070)
      when {
        isTraceInProgress() -> traceEventEnd()
      }
    }
    else -> $composer.skipToGroupEnd()
  }
  { // BLOCK
    { // BLOCK
      val tmp0_safe_receiver: ScopeUpdateScope? = $composer.endRestartGroup()
      when {
        EQEQ(arg0 = tmp0_safe_receiver, arg1 = null) -> null
        else -> tmp0_safe_receiver.updateScope(block = local fun <anonymous>($composer: Composer?, $force: Int) {
          return Display(text = text, $composer = $composer, $changed = updateChangedFlags(flags = $changed.or(other = 1)))
        }
)
      }
    }
  }
}

internal object ComposableSingletons$Ir_dump_targetKt {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  internal val lambda-1: @ExtensionFunctionType Function3<RowScope, Composer, Int, Unit>
    field = composableLambdaInstance(key = 1937033914, tracked = false, block =     @Composable
    @ComposableTarget(applier = "androidx.compose.ui.UiComposable")
local fun RowScope.<anonymous>(/* var */ $composer: Composer?, $changed: Int) {
      when {
        when {
          EQEQ(arg0 = $changed.and(other = 81), arg1 = 16).not() -> true
          else -> $composer.<get-skipping>().not()
        } -> { // BLOCK
          when {
            isTraceInProgress() -> traceEventStart(key = 1937033914, dirty1 = $changed, dirty2 = -1, info = "land.sungbin.androidplayground.ComposableSingletons$Ir_dump_targetKt.lambda-1.<anonymous> (ir-dump-target.kt:54)")
          }
          Unit
          when {
            isTraceInProgress() -> traceEventEnd()
          }
        }
        else -> $composer.skipToGroupEnd()
      }
    }
)
    internal get

}


INFO:  Decompiling class land/sungbin/androidplayground/PlaygroundActivity
INFO:  ... done
INFO:  Decompiling class land/sungbin/androidplayground/Ir_dump_targetKt
INFO:  ... done
INFO:  Decompiling class land/sungbin/androidplayground/ComposableSingletons$Ir_dump_targetKt
WARN:     Unreferenced anonymous class land/sungbin/androidplayground/ComposableSingletons$Ir_dump_targetKt$lambda-1$1!
INFO:  ... done
INFO:  Decompiling class land/sungbin/androidplayground/PlaygroundActivityKt
INFO:  ... done
INFO:  Decompiling class land/sungbin/androidplayground/ComposableSingletons$PlaygroundActivityKt
WARN:     Unreferenced anonymous class land/sungbin/androidplayground/ComposableSingletons$PlaygroundActivityKt$lambda-1$1!
INFO:  ... done
DecomposerPlugin: decomposed in /Users/jisungbin/AndroidStudioProjects/AndroidPlayground/app/build/decompiled

> Task :app:lintReportDebug
Wrote HTML report to file:///Users/jisungbin/AndroidStudioProjects/AndroidPlayground/app/build/reports/lint-results-debug.html

Deprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/8.4/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD SUCCESSFUL in 43s
81 actionable tasks: 44 executed, 17 from cache, 20 up-to-date
jisungbin@iMac AndroidPlayground %









